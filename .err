Error: Route "/admin/courses/[courseId]/edit" used `params.courseId`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at EditCoursePage (src/app/(dashboard)/admin/courses/[courseId]/edit/page.tsx:24:40)
  22 |
  23 | export default async function EditCoursePage({ params }: EditCoursePageProps) {
> 24 |   const course = await getCourse(params.courseId)
     |                                        ^
  25 |
  26 |   if (!course) {
  27 |     notFound()
Only plain objects can be passed to Client Components from Server Components. Decimal objects are not supported.
  {id: ..., title: ..., description: ..., shortDescription: ..., thumbnail: ..., status: ..., difficulty: ..., duration: ..., price: Decimal, tags: ..., prerequisites: ..., syllabus: ..., learningOutcomes: ..., passingScore: ..., requireSequentialCompletion: ..., allowRetakes: ..., maxAttempts: ..., createdAt: ..., updatedAt: ..., publishedAt: ..., creatorId: ..., creator: ..., modules: ..., enrollments: ..., _count: ...}
                                                                                                                                     ^^^^^^^
 GET /admin/courses/cmdvwpzlo0001ppukb27orgw5/edit 200 in 1472ms




Error: Route "/admin/courses/[courseId]" used `params.courseId`. `params` should be awaited before using its properties. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at CourseDetailsPage (src/app/(dashboard)/admin/courses/[courseId]/page.tsx:41:40)
  39 |
  40 | export default async function CourseDetailsPage({ params }: CourseDetailsPageProps) {
> 41 |   const course = await getCourse(params.courseId)
     |                                        ^
  42 |
  43 |   if (!course) {
  44 |     notFound()
 GET /admin/courses/cmdvwpzlo0001ppukb27orgw5 200 in 1299ms


Error fetching dashboard stats: SyntaxError: Unexpected token '<', "<!DOCTYPE "... is not valid JSON
    at JSON.parse (<anonymous>)
    at async getDashboardStats (src/app/(dashboard)/admin/page.tsx:23:11)
    at async AdminDashboard (src/app/(dashboard)/admin/page.tsx:31:16)
  21 |     );
  22 |     if (!response.ok) throw new Error("Failed to fetch stats");
> 23 |     return await response.json();
     |           ^
  24 |   } catch (error) {
  25 |     console.error("Error fetching dashboard stats:", error);
  26 |     return null;
 GET /admin 200 in 4070ms


// app/(dashboard)/admin/page.tsx
import { AdminLayout } from "@/components/layout/AdminLayout";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Users, BookOpen, TrendingUp, Settings, Plus, Eye } from "lucide-react";
import Link from "next/link";

async function getDashboardStats() {
  try {
    const response = await fetch(
      `${process.env.NEXTAUTH_URL}/api/dashboard/stats`,
      {
        cache: "no-store",
      }
    );
    if (!response.ok) throw new Error("Failed to fetch stats");
    return await response.json();
  } catch (error) {
    console.error("Error fetching dashboard stats:", error);
    return null;
  }
}

export default async function AdminDashboard() {
  const stats = await getDashboardStats();

  return (
    <AdminLayout
      title="System Administration"
      description="Manage users, courses, and platform settings."
    >
      {/* Stats Grid */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Users</CardTitle>
            <Users className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats?.users?.total || 0}</div>
            <p className="text-xs text-muted-foreground">
              {stats?.users?.active || 0} active users
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Courses</CardTitle>
            <BookOpen className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {stats?.courses?.total || 0}
            </div>
            <p className="text-xs text-muted-foreground">
              {stats?.courses?.published || 0} published
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Enrollments</CardTitle>
            <TrendingUp className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {stats?.enrollments?.total || 0}
            </div>
            <p className="text-xs text-muted-foreground">
              {stats?.enrollments?.active || 0} active
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">System Status</CardTitle>
            <Settings className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-green-600">Online</div>
            <p className="text-xs text-muted-foreground">
              All systems operational
            </p>
          </CardContent>
        </Card>
      </div>

      {/* Quick Actions */}
      <div className="grid md:grid-cols-2 gap-8">
        <Card>
          <CardHeader>
            <CardTitle>Quick Actions</CardTitle>
            <CardDescription>Common administrative tasks</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <Link href="/admin/users">
              <Button className="w-full justify-start">
                <Users className="h-4 w-4 mr-2" />
                Manage Users
              </Button>
            </Link>
            <Link href="/admin/courses/create">
              <Button className="w-full justify-start">
                <Plus className="h-4 w-4 mr-2" />
                Create Course
              </Button>
            </Link>
            <Link href="/admin/courses">
              <Button className="w-full justify-start" variant="outline">
                <Eye className="h-4 w-4 mr-2" />
                View All Courses
              </Button>
            </Link>
            <Link href="/admin/analytics">
              <Button className="w-full justify-start" variant="outline">
                <TrendingUp className="h-4 w-4 mr-2" />
                View Analytics
              </Button>
            </Link>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>System Overview</CardTitle>
            <CardDescription>Platform health and key metrics</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="flex justify-between items-center p-3 bg-green-50 rounded-lg">
              <div>
                <p className="font-medium text-green-900">System Status</p>
                <p className="text-sm text-green-700">
                  All services operational
                </p>
              </div>
              <div className="h-3 w-3 bg-green-500 rounded-full"></div>
            </div>

            <div className="flex justify-between items-center p-3 bg-blue-50 rounded-lg">
              <div>
                <p className="font-medium text-blue-900">Database</p>
                <p className="text-sm text-blue-700">Connected and healthy</p>
              </div>
              <div className="h-3 w-3 bg-blue-500 rounded-full"></div>
            </div>

            <div className="flex justify-between items-center p-3 bg-yellow-50 rounded-lg">
              <div>
                <p className="font-medium text-yellow-900">Pending Reviews</p>
                <p className="text-sm text-yellow-700">
                  0 items need attention
                </p>
              </div>
              <div className="h-3 w-3 bg-yellow-500 rounded-full"></div>
            </div>
          </CardContent>
        </Card>
      </div>
    </AdminLayout>
  );
}


// app/api/dashboard/stats/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth'
import { UserService } from '@/lib/services/userService'
import { CourseService } from '@/lib/services/courseService'
import { EnrollmentService } from '@/lib/services/enrollmentService'

// GET /api/dashboard/stats - Get dashboard statistics
export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    let stats = {}

    if (session.user.role === 'ADMIN') {
      // Admin gets all system stats
      const [userStats, courseStats, enrollmentStats] = await Promise.all([
        UserService.getUserStats(),
        CourseService.getCourseStats(),
        EnrollmentService.getEnrollmentStats(),
      ])

      stats = {
        users: userStats,
        courses: courseStats,
        enrollments: enrollmentStats,
      }
    } else if (session.user.role === 'MANAGER') {
      // Manager gets their course stats
      const managerCourses = await CourseService.getCourses(
        { creatorId: session.user.id },
        1,
        1000 // Get all courses for stats
      )

      const courseIds = managerCourses.courses.map(c => c.id)
      let totalEnrollments = 0
      
      for (const courseId of courseIds) {
        const enrollments = await EnrollmentService.getCourseEnrollments(courseId)
        totalEnrollments += enrollments.length
      }

      stats = {
        courses: {
          total: managerCourses.courses.length,
          published: managerCourses.courses.filter(c => c.status === 'PUBLISHED').length,
          draft: managerCourses.courses.filter(c => c.status === 'DRAFT').length,
        },
        enrollments: {
          total: totalEnrollments,
        },
      }
    } else {
      // Student gets their enrollment stats
      const enrollments = await EnrollmentService.getUserEnrollments(session.user.id)
      
      stats = {
        enrollments: {
          total: enrollments.length,
          active: enrollments.filter(e => e.status === 'ACTIVE').length,
          completed: enrollments.filter(e => e.status === 'COMPLETED').length,
        },
      }
    }

    return NextResponse.json(stats)
  } catch (error) {
    console.error('GET /api/dashboard/stats error:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}