// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Enhanced User Model
enum UserRole {
  ADMIN
  MANAGER
  STUDENT
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

model User {
  id            String      @id @default(cuid())
  email         String      @unique
  password      String
  firstName     String
  lastName      String
  role          UserRole    @default(STUDENT)
  status        UserStatus  @default(ACTIVE)
  profileImage  String?
  phoneNumber   String?
  dateOfBirth   DateTime?
  address       String?
  
  // Timestamps
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  lastLoginAt   DateTime?
  
  // NextAuth relations
  accounts      Account[]
  sessions      Session[]
  
  // Application relations
  enrollments   Enrollment[]
  createdCourses Course[]   @relation("CourseCreator")
  
  // Assessment & Progress Relations
  quizAttempts  QuizAttempt[]
  topicProgress TopicProgress[]
  moduleProgress ModuleProgress[]
  submissions   Submission[]
  certificates  Certificate[]
  
  @@map("users")
}

// Course Structure
enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum DifficultyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model Course {
  id            String         @id @default(cuid())
  title         String
  description   String         @db.Text
  shortDescription String?
  thumbnail     String?
  status        CourseStatus   @default(DRAFT)
  difficulty    DifficultyLevel @default(BEGINNER)
  duration      Int            // Duration in hours
  price         Decimal        @default(0) @db.Decimal(10, 2)
  tags          String[]
  prerequisites String[]
  
  // Content
  syllabus      String?        @db.Text
  learningOutcomes String[]
  
  // Assessment Requirements
  passingScore  Int            @default(80) // Overall course passing percentage
  requireSequentialCompletion Boolean @default(true) // Must complete modules in order
  allowRetakes  Boolean        @default(true)
  maxAttempts   Int?           // Null = unlimited attempts
  
  // Timestamps
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  publishedAt   DateTime?
  
  // Relations
  creatorId     String
  creator       User           @relation("CourseCreator", fields: [creatorId], references: [id])
  modules       Module[]
  enrollments   Enrollment[]
  certificates  Certificate[]
  
  @@map("courses")
}

// Enhanced Module with Assessment Requirements
model Module {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  order       Int
  duration    Int      // Duration in minutes
  
  // Assessment Requirements
  passingScore Int     @default(80) // Module passing percentage
  prerequisiteModuleId String? // Must complete this module first
  isRequired   Boolean @default(true) // Can skip if false
  unlockDelay  Int?    // Hours to wait before unlock (for spaced learning)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  prerequisiteModule Module? @relation("ModulePrerequisites", fields: [prerequisiteModuleId], references: [id])
  dependentModules Module[] @relation("ModulePrerequisites")
  topics      Topic[]
  progress    ModuleProgress[]
  
  @@map("modules")
}

// Topics (Individual learning units within modules)
model Topic {
  id          String     @id @default(cuid())
  title       String
  slug        String     @unique // URL-friendly identifier
  description String?    @db.Text
  content     String     @db.Text // Rich text content
  orderIndex  Int        // Sequence within module
  duration    Int?       // Duration in minutes
  
  // Topic Type & Content
  topicType   TopicType  @default(LESSON)
  videoUrl    String?    // For video topics
  attachments String[]   // File URLs for resources
  
  // Assessment Requirements
  passingScore Int       @default(80) // Topic passing percentage
  maxAttempts  Int?      // Per topic attempt limit
  isRequired   Boolean   @default(true)
  allowSkip    Boolean   @default(false) // Can skip if struggling
  
  // Prerequisites within module
  prerequisiteTopicId String?
  
  // Timestamps
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Relations
  moduleId    String
  module      Module     @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  prerequisiteTopic Topic? @relation("TopicPrerequisites", fields: [prerequisiteTopicId], references: [id])
  dependentTopics Topic[] @relation("TopicPrerequisites")
  
  quizzes     Quiz[]
  progress    TopicProgress[]
  submissions Submission[]
  
  @@map("topics")
}

enum TopicType {
  LESSON       // Text/video content
  PRACTICE     // Interactive exercises
  ASSESSMENT   // Graded quiz/test
  RESOURCE     // Downloadable materials
}

// Enhanced Quiz System
model Quiz {
  id          String   @id @default(cuid())
  topicId     String
  title       String
  description String?
  
  // Quiz Configuration
  timeLimit   Int?     // Minutes (null = no time limit)
  shuffleQuestions Boolean @default(false)
  shuffleOptions Boolean @default(false)
  showFeedback Boolean @default(true) // Show correct answers after
  allowReview Boolean @default(true) // Allow reviewing answers
  passingScore Int     @default(80) // Percentage to pass
  maxAttempts Int?     // Null = unlimited
  
  // Advanced Features
  adaptiveDifficulty Boolean @default(false) // Adjust based on performance
  requireMastery Boolean @default(false) // Must get all questions right
  practiceMode Boolean @default(false) // Doesn't count toward progress
  
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  topic     Topic         @relation(fields: [topicId], references: [id], onDelete: Cascade)
  questions Question[]
  attempts  QuizAttempt[]

  @@map("quizzes")
}

// Enhanced Question System
model Question {
  id            String       @id @default(cuid())
  quizId        String
  questionText  String       @db.Text
  questionType  QuestionType @default(MULTIPLE_CHOICE)
  orderIndex    Int
  points        Int          @default(1)
  explanation   String?      @db.Text // Detailed explanation shown after answering
  hint          String?      // Optional hint for students
  difficulty    QuestionDifficulty @default(MEDIUM)
  tags          String[]     // For categorization and analytics
  
  // Advanced Question Features
  timeLimit     Int?         // Seconds for this question
  allowPartialCredit Boolean @default(false)
  caseSensitive Boolean     @default(false) // For text answers
  
  isActive      Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  quiz    Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options Option[]
  answers Answer[]

  @@map("questions")
}

enum QuestionType {
  MULTIPLE_CHOICE
  MULTIPLE_SELECT  // Multiple correct answers
  TRUE_FALSE
  SHORT_ANSWER
  LONG_ANSWER
  MATCHING
  ORDERING
}

enum QuestionDifficulty {
  EASY
  MEDIUM
  HARD
}

// Enhanced Answer Options
model Option {
  id         String  @id @default(cuid())
  questionId String
  text       String  @db.Text
  isCorrect  Boolean @default(false)
  orderIndex Int
  explanation String? // Why this option is right/wrong

  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answers  Answer[]

  @@map("options")
}

// Enhanced Enrollment with Progress Tracking
enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  DROPPED
  SUSPENDED
  ON_HOLD
}

model Enrollment {
  id              String           @id @default(cuid())
  status          EnrollmentStatus @default(ACTIVE)
  overallProgress Int              @default(0) // Overall course progress percentage
  
  // Completion & Performance
  completedAt     DateTime?
  certificateIssued Boolean        @default(false)
  finalGrade      Int?             // Final course grade percentage
  totalTimeSpent  Int              @default(0) // Total minutes spent
  
  // Attempts & Retakes
  attemptNumber   Int              @default(1)
  canRetake       Boolean          @default(true)
  nextRetakeAt    DateTime?        // When they can retake if failed
  
  // Timestamps
  enrolledAt      DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  lastAccessAt    DateTime?
  
  // Relations
  userId          String
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId        String
  course          Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId])
  @@map("enrollments")
}

// Detailed Module Progress Tracking
enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  NEEDS_REVIEW
  FAILED
}

model ModuleProgress {
  id            String         @id @default(cuid())
  userId        String
  moduleId      String
  status        ProgressStatus @default(NOT_STARTED)
  
  // Progress Metrics
  progressPercentage Int         @default(0)
  currentScore  Int?            // Current average score
  bestScore     Int?            // Best attempt score
  attemptsUsed  Int            @default(0)
  timeSpent     Int            @default(0) // Minutes spent
  
  // Status Tracking
  startedAt     DateTime?
  completedAt   DateTime?
  lastAccessAt  DateTime?
  unlockedAt    DateTime?       // When module became available
  
  // Mastery Tracking
  masteryLevel  MasteryLevel   @default(NOVICE)
  strugglingAreas String[]      // Topics where student is struggling
  strongAreas   String[]       // Topics where student excels
  
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@unique([userId, moduleId])
  @@map("module_progress")
}

// Granular Topic Progress
model TopicProgress {
  id            String         @id @default(cuid())
  userId        String
  topicId       String
  status        ProgressStatus @default(NOT_STARTED)
  
  // Detailed Analytics
  attemptCount  Int            @default(0)
  bestScore     Int?           // Best quiz score as percentage
  averageScore  Int?           // Average across all attempts
  timeSpent     Int            @default(0) // Minutes spent on topic
  
  // Learning Analytics
  viewCount     Int            @default(0) // How many times viewed
  completionRate Int           @default(0) // Percentage of topic completed
  strugglingIndicator Boolean  @default(false) // Algorithm sets this
  masteryAchieved Boolean     @default(false)
  
  // Timestamps
  startedAt     DateTime?
  completedAt   DateTime?
  lastAccessAt  DateTime?
  
  // Spaced Repetition
  nextReviewAt  DateTime?      // When to review this topic again
  reviewCount   Int            @default(0)
  
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@unique([userId, topicId])
  @@map("topic_progress")
}

enum MasteryLevel {
  NOVICE
  DEVELOPING
  PROFICIENT
  ADVANCED
  EXPERT
}

// Enhanced Quiz Attempts with Detailed Analytics
model QuizAttempt {
  id          String    @id @default(cuid())
  userId      String
  quizId      String
  
  // Performance Metrics
  score       Int       // Percentage score
  passed      Boolean   @default(false)
  isPractice  Boolean   @default(false) // Practice vs real attempt
  
  // Timing Analytics
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  timeSpent   Int?      // Seconds spent on quiz
  
  // Detailed Analytics
  questionsCorrect Int   @default(0)
  questionsTotal   Int   @default(0)
  averageTimePerQuestion Int? // Seconds per question
  
  // Behavioral Analytics
  questionsSkipped Int   @default(0)
  questionsReviewed Int  @default(0)
  hintsUsed       Int    @default(0)
  
  // Learning Insights
  difficultyAreas Json?  // Topics/skills where student struggled
  strengthAreas   Json?  // Topics/skills where student excelled
  recommendedReview String[] // Topics to review
  
  createdAt   DateTime  @default(now())

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz    Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers Answer[]

  @@map("quiz_attempts")
}

// Enhanced Answer Tracking
model Answer {
  id            String  @id @default(cuid())
  attemptId     String
  questionId    String
  
  // Answer Data
  selectedOption String? // For multiple choice (option ID)
  selectedOptions String[] // For multiple select
  textAnswer    String? // For text answers
  
  // Performance Data
  isCorrect     Boolean @default(false)
  points        Int     @default(0)
  partialCredit Int?    // Partial points awarded
  
  // Timing & Behavior
  timeSpent     Int?    // Seconds on this question
  attemptCount  Int     @default(1) // How many times they changed answer
  usedHint      Boolean @default(false)
  flaggedForReview Boolean @default(false)
  
  createdAt     DateTime @default(now())

  attempt  QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  option   Option?     @relation(fields: [selectedOption], references: [id])

  @@map("answers")
}

// Enhanced Submissions for Assignments
enum SubmissionStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  GRADED
  RETURNED
  RESUBMITTED
}

model Submission {
  id          String           @id @default(cuid())
  userId      String
  topicId     String
  
  content     String           @db.Text
  attachments String[]         // File URLs
  
  // Grading
  score       Int?
  maxScore    Int              @default(100)
  feedback    String?          @db.Text
  rubricScores Json?           // Detailed rubric scoring
  
  status      SubmissionStatus @default(DRAFT)
  attemptNumber Int            @default(1)
  
  // Timestamps
  submittedAt DateTime?
  gradedAt    DateTime?
  returnedAt  DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@map("submissions")
}

// Enhanced Certificate System
enum CertificateType {
  COURSE_COMPLETION
  MASTERY_ACHIEVEMENT  
  SKILL_BADGE
  MILESTONE
}

model Certificate {
  id           String          @id @default(cuid())
  userId       String
  courseId     String
  
  certificateNumber String      @unique
  certificateType CertificateType @default(COURSE_COMPLETION)
  title        String          // "Computer Literacy Mastery"
  description  String?         // Achievement description
  
  // Performance Data
  finalScore   Int?            // Final course score
  completionTime Int?          // Days to complete
  masteryLevel MasteryLevel?   // Level achieved
  
  // Certificate Details
  issuedAt     DateTime        @default(now())
  validFrom    DateTime        @default(now())
  validUntil   DateTime?       // For certifications that expire
  templateUrl  String?         // URL to certificate template
  badgeUrl     String?         // Digital badge URL
  
  // Verification
  verificationCode String      @unique
  isRevoked    Boolean         @default(false)
  revokedAt    DateTime?
  revokedReason String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId, certificateType])
  @@map("certificates")
}